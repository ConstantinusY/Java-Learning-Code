import java.util.Arrays;

public class code04 {
    /**
     * 快排算法
     * @param arr 需要排序的数组
     * @param left 数组头
     * @param right 数组尾
     */
    public static void quickSort(int[] arr, int left,int right){
        //递归结束条件
        if(left >= right){
            return;
        }

        int p = arr[left];//中心轴
        int l = left;//左指针
        int r = right;//右指针

        while (l < r){ //当左指针没遇到右指针
            //从右边开始判断
            while (l < r && arr[r] >= p){
                r--;
            }//循环结束后找到大于中心轴的元素，然后进行赋值
            if(l < r){//如果左右指针不相等则进行赋值，如果相等就找到p的位置,不用进行赋值
                arr[l] = arr[r];
            }

            //剩余的从左侧开始判断
            while (l < r && arr[l] <= p){
                l ++;
            }//循环结束后找到小于中心轴的元素，然后进行赋值
            if (l < r){//如果左右指针不相等则进行赋值，如果相等就找到p的位置,不用进行赋值
                arr[r] = arr[l];
            }

            //插入中心轴
            arr[l] = p;
            //此时中心轴左侧元素全部小于中心轴，中心轴右侧元素全部大于中心轴

            //继续对左右两边进行相同操作
            quickSort(arr,left,l-1);
            quickSort(arr,l+1,right);
        }
    }

    public static void main(String[] args) {
        int[] arr = {8, 495, 25, 23, 174, 159, 68, 315, 6, 193, 149, 318, 165, 252, 75, 324, 392, 350, 163, 414, 225, 424, 416, 357, 466, 267, 162, 163, 236, 185, 358, 249, 107, 183, 78, 481, 215, 208, 46, 477, 491, 364, 235, 26, 323, 394, 21, 143, 14, 200, 242, 354, 66, 486, 174, 209, 322, 2, 50, 297, 213, 458, 285, 1, 185, 467, 132, 174, 428, 499, 362, 432, 456, 87, 164, 184, 42, 436, 322, 160, 204, 180, 401, 397, 7, 79, 409, 44, 76, 283, 360, 489, 253, 474, 426, 12, 177, 455, 360, 321, 60, 477, 280, 407, 36, 4, 355, 262, 416, 85, 434, 307, 243, 121, 3, 196, 310, 122, 252, 221, 268, 483, 442, 77, 147, 490, 92, 99, 47, 263, 30, 462, 43, 197, 1, 335, 232, 89, 169, 138, 486, 238, 322, 287, 334, 281, 30, 276, 206, 168, 411, 329, 145, 422, 209, 431, 447, 264, 14, 497, 480, 75, 418, 481, 429, 283, 348, 76, 455, 103, 150, 370, 69, 314, 257, 357, 18, 162, 16, 120, 347, 275, 439, 131, 187, 424, 225, 90, 100, 371, 475, 224, 60, 67, 472, 38, 138, 64, 17, 261, 246, 146, 126, 401, 447, 258, 324, 340, 466, 413, 342, 24, 309, 283, 343, 256, 84, 41, 398, 214, 100, 200, 228, 322, 490, 463, 87, 290, 82, 415, 416, 123, 317, 422, 61, 119, 45, 301, 281, 94, 155, 267, 488, 56, 496, 479, 35, 352, 481, 81, 171, 159, 98, 434, 23, 231, 267, 195, 413, 256, 213, 449, 86, 334, 410, 331, 410, 29, 128, 243, 282, 353, 69, 254, 158, 188, 472, 187, 143, 370, 433, 64, 445, 98, 182, 2, 267, 452, 130, 490, 172, 383, 279, 485, 282, 49, 400, 344, 102, 117, 478, 201, 466, 493, 279, 263, 315, 404, 377, 364, 380, 320, 77, 482, 108, 377, 472, 15, 248, 13, 376, 30, 480, 317, 412, 163, 308, 261, 141, 99, 445, 321, 145, 222, 186, 359, 409, 54, 160, 465, 271, 285, 273, 347, 500, 262, 500, 426, 228, 229, 43, 106, 132, 473, 311, 454, 92, 80, 253, 485, 361, 214, 122, 112, 331, 18, 221, 3, 180, 339, 261, 126, 471, 38, 86, 350, 83, 78, 173, 488, 110, 237, 123, 414, 163, 1, 355, 236, 255, 231, 232, 275, 422, 203, 415, 254, 94, 362, 179, 365, 132, 322, 106, 219, 255, 460, 27, 39, 301, 428, 398, 255, 434, 142, 320, 406, 136, 188, 206, 168, 206, 53, 333, 380, 197, 28, 6, 351, 276, 98, 276, 436, 372, 226, 347, 244, 420, 375, 237, 462, 332, 69, 416, 387, 300, 208, 471, 429, 344, 431, 5, 307, 171, 49, 308, 447, 484, 126, 424, 415, 475, 280, 265, 329, 61, 453, 335, 265, 258, 369, 47, 317, 24, 34, 375, 372, 272, 140, 174, 308, 18, 58, 327, 300, 51, 51, 430, 38, 83, 58, 401, 206, 369, 267, 164, 383, 326, 333, 239, 318, 417, 229, 37, 414, 390, 325, 326, 183, 395, 390, 179, 207, 191, 249, 187, 131, 310, 160, 242, 214, 253, 82, 180, 465, 140, 280, 220, 11, 248, 496, 7, 272, 246, 364, 180, 145, 237, 227, 451, 455, 499, 448, 142, 86, 75, 440, 412, 4, 321, 279, 216, 127, 479, 367, 43, 155, 159, 97, 10, 397, 90, 272, 114, 217, 479, 292, 131, 196, 338, 472, 428, 427, 293, 465, 305, 220, 377, 219, 207, 375, 350, 277, 65, 16, 292, 8, 424, 248, 450, 485, 212, 228, 193, 494, 438, 275, 393, 52, 498, 305, 233, 167, 170, 113, 297, 434, 354, 426, 61, 281, 32, 180, 390, 149, 456, 338, 477, 351, 308, 76, 240, 281, 181, 26, 260, 110, 485, 117, 357, 285, 278, 484, 13, 254, 69, 353, 23, 385, 128, 87, 284, 416, 306, 64, 186, 287, 421, 236, 481, 247, 46, 19, 227, 52, 333, 20, 272, 188, 308, 291, 253, 398, 41, 231, 410, 52, 216, 321, 372, 470, 476, 240, 54, 138, 339, 190, 452, 272, 392, 183, 433, 339, 324, 113, 282, 363, 257, 465, 420, 112, 235, 5, 195, 40, 257, 428, 50, 244, 141, 314, 50, 215, 172, 17, 306, 377, 189, 221, 206, 212, 58, 131, 436, 269, 492, 439, 409, 125, 452, 139, 485, 182, 173, 268, 217, 458, 10, 471, 298, 308, 366, 485, 450, 167, 50, 89, 129, 47, 145, 71, 114, 493, 106, 275, 195, 455, 87, 243, 312, 86, 154, 215, 382, 38, 364, 395, 5, 164, 258, 66, 100, 170, 44, 261, 437, 147, 178, 269, 238, 121, 283, 76, 162, 365, 492, 184, 454, 267, 89, 327, 267, 223, 215, 336, 4, 116, 258, 317, 449, 451, 331, 147, 56, 315, 186, 402, 257, 117, 318, 17, 434, 383, 342, 86, 4, 240, 428, 186, 412, 43, 397, 218, 270, 156, 380, 19, 415, 391, 348, 56, 351, 450, 364, 182, 461, 64, 490, 408, 16, 429, 112, 160, 308, 105, 95, 82, 470, 253, 119, 213, 365, 468, 349, 72, 324, 227, 432, 324, 154, 453, 121, 343, 433, 230, 382, 432, 320, 463, 314, 155, 452, 305, 35, 299, 489, 243, 362, 369, 398, 140, 308, 368, 26, 150, 59, 402, 303, 406, 259, 142, 397, 396, 467, 410, 409, 214, 63, 13, 408, 449, 87, 475, 191, 148, 60, 498, 432, 181, 391, 214, 294, 258, 112, 247, 455, 345, 104, 470, 223, 89, 250, 498, 373, 33, 296, 98, 174, 322, 117, 197, 494, 97, 69, 485, 315, 375, 317, 252, 250, 183, 218, 297, 149, 198, 217, 428, 467, 185, 379, 334, 314, 242, 383, 76, 226, 32, 285, 85, 271, 231, 412, 219, 94, 221, 356, 187, 78, 336, 56, 78, 382, 76, 390, 194, 190, 157, 445, 261, 83, 401, 38, 401, 49, 140, 453, 463, 431, 446, 370, 133, 66, 464, 286, 196, 102, 56, 223, 327, 11, 459, 341, 8, 121, 34, 488, 261, 191, 85, 191, 283};
        System.out.println(Arrays.toString(arr));

        long sTime = System.currentTimeMillis();

        quickSort(arr, 0, arr.length-1);

        System.out.println(Arrays.toString(arr));

        long totalTime = System.currentTimeMillis()-sTime;

        System.out.println("程序运行时间"+totalTime+"ms");

    }
}
